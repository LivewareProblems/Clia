// Clia Un-Grammar.
// WARN: this is not finished do not consider it right
// This grammar specifies the structure of Clia's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

//*************************//
// Names, Aliases and Macros //
//*************************//

Name =
  'ident'

Alias =
  'alias'

TokenTree =
  '(' ')'

//*************************//
//          Items          //
//*************************//

SourceFile =
  'shebang'?
  Item*

Item =
    Expr
  | Fn
  | Module

Module =
  'defmodule' Alias
  (ModuleBlock)

ModuleBlock =
  'do' Item* 'end'

Fn =
  'def' Name ParamList
  body: BlockExpr

ParamList =
  '(' (Param (',' Param)* ','?)? ')'

Param =
  Pat*

//****************************//
// Statements and Expressions //
//****************************//
Expr =
  BinOpExpr
| CallExpr
| Literal
| PrefixExpr
| BlockExpr
| Binding
| ParenExpr

BinOpExpr =
  lhs:Expr
  op:(
    '||' | '&&'
  | '==' | '!=' | '<=' | '>=' | '<' | '>'
  | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '|' | '&'
  )
  rhs:Expr

CallExpr =
  Name ArgList

ArgList =
  '(' args:(Expr (',' Expr)* ','?)? ')'

Literal =
  value:(
    'int_number' | 'float_number'
  | 'ident'
  )

PrefixExpr =
  op:('-' | '+') Expr


BlockExpr =
  ('do' body:ExprList ('with' HandlerList)? 'end')

HandlerList =
  MatchArm*

MatchArm =
  Pat WhenClause? '->' Expr

ExprList =
  Expr*

Binding =
  Pat '=' match:Expr

ParenExpr =
  '(' Expr ')'

//************************//
//        Patterns        //
//************************//

Pat =
  WildcardPat
| LiteralPat
| IdentPat

WildcardPat =
  '_' Name?

LiteralPat =
  '-'? Literal

IdentPat =
  Name
